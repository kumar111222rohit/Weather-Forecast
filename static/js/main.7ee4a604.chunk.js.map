{"version":3,"sources":["responsiveForDevices/DeviceConfiguration.js","components/SearchCity.js","components/LabelSmall.js","components/Text.js","components/ForecastHour.js","components/ResultEffectFadeIn.js","components/LabelLarge.js","components/LabelMid.js","components/Result.js","components/NoResult.js","components/App.js","serviceWorker.js","index.js"],"names":["size","deviceConfiguration","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","SearchBar","styled","form","showResult","SearchInput","input","SearchCity","props","onTextChanged","e","value","target","console","log","suggestions","length","regex","RegExp","cityList","sort","filter","v","test","setState","text","change","state","suggestionsSelected","submit","renderSuggestions","style","listStyle","backgroundColor","borderRadius","padding","map","item","index","key","onClick","this","onSubmit","type","placeholder","onChange","React","Component","LabelSmall","h4","color","weight","fontSize","align","firstToUpperCase","Text","span","ForecastWrapper","div","WeatherIcon","img","ForecastHour","temp","month","day","hour","icon","iconUrl","src","ResultEffectFadeIn","keyframes","LabelLarge","h2","LabelMid","h3","Results","LocationWrapper","CurrentWeatherWrapper","TemperatureWrapper","Temperature","WeatherDetailsWrapper","WeatherDetail","Forecast","Result","weather","city","country","date","description","main","sunset","sunrise","humidity","wind","highestTemp","lowestTemp","forecasts","forecast","dt","Math","floor","dt_txt","slice","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","NotFoundWrapper","NotfoundIcon","NotFoundText","NoResult","faFrown","AppTitle","h1","showLabel","secondary","WeatherWrapper","App","weatherInfo","error","handleInputChange","cityValue","handleSearchCity","eachCityValue","preventDefault","APIkey","process","Promise","all","fetch","then","res1","res2","ok","json","Error","statusText","data1","data2","currentDate","Date","getDay","getDate","getMonth","sys","toLocaleTimeString","name","temp_max","temp_min","clouds","speed","list","catch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ee4a604.chunk.js","sourcesContent":["const size = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '525px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px',\n};\n\nconst deviceConfiguration = {\n  mobileS: `(min-width: ${size.mobileS})`,\n  mobileM: `(min-width: ${size.mobileM})`,\n  mobileL: `(min-width: ${size.mobileL})`,\n  tablet: `(min-width: ${size.tablet})`,\n  laptop: `(min-width: ${size.laptop})`,\n  laptopL: `(min-width: ${size.laptopL})`,\n  desktop: `(min-width: ${size.desktop})`,\n  desktopL: `(min-width: ${size.desktop})`,\n};\n\nexport default deviceConfiguration;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\nimport cityList from '../cityMetadata'\n\n\nconst SearchBar = styled.form`\n  top: ${({showResult}) => (showResult ? '0%' : '30%')};\n  position: relative;\n  margin: 0 auto;\n  max-width: 500px;\n  transition: 0.8s 0.5s;\n  @media ${deviceConfiguration.laptopL} {\n    max-width: 600px;\n  }\n  @media ${deviceConfiguration.desktop} {\n    max-width: 700px;\n  }\n`;\nconst\n    SearchInput = styled.input`\n  width: 100%;\n  border: none;\n  background-color: #ffffff;\n  font-size: 16px;\n  padding: 10px 15px 10px 40px;\n  color: #c5c5c5;\n  transition: 0.2s;\n  border-radius: 20px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  &:focus {\n    color: #191919;\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    outline: none;\n  }\n  @media ${deviceConfiguration.tablet} {\n    font-size: 18px;\n  }\n  @media ${deviceConfiguration.laptop} {\n    padding: 15px 20px 15px 45px;\n    border-radius: 30px;\n  }\n`;\n\nexport default  class SearchCity extends React.Component {\n  constructor(props) {\n    super(props)\n    this.cityList=cityList;\n    this.state={\n      suggestions:[],\n      text:''\n    }\n\n  }\n  onTextChanged = (e) => {\n    const value = e.target.value\n    console.log(value)\n    let suggestions=[]\n    if(value.length>0){\n      const regex=new RegExp(`^${value}`,'i')\n      suggestions=this.cityList.sort().filter(v=>regex.test(v))\n    }\n    this.setState(()=>({suggestions,text:value}))\n    this.props.change(this.state.text,e)\n  }\n  suggestionsSelected = (value,e) => {\n    console.log(\"option clicked\")\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n\n    }))\n    this.props.submit(value,e)\n  }\n  renderSuggestions=()=>{\n    const {suggestions}=this.state\n    if(suggestions.length===0){\n      return null;\n    }\n    return(\n        <ul style={{listStyle: 'none',\n          backgroundColor: 'white',\n          borderRadius: '20px',\n          padding: '20px'}}>\n          {suggestions.map((item,index)=> <li style={{padding: '5px'}} key={index} onClick={(e)=>this.suggestionsSelected(item,e)}>{item}</li>)}\n        </ul>\n    )\n  }\n\n  render() {\n    const text=this.state.text\n    console.log(text)\n    return (\n        <div>\n          <SearchBar showResult={this.props.showResult} onSubmit={(e)=>this.props.submit(this.state.text,e)}>\n            <SearchInput type=\"text\" value={text} placeholder=\"Enter city\" onChange={this.onTextChanged}/>\n            {/*<SearchInput type=\"text\" value={text} onChange={this.props.change} placeholder=\"Enter city\"/>*/}\n\n\n            {this.renderSuggestions()}\n          </SearchBar>\n        </div>\n    );\n  }\n}\nSearchCity.propTypes = {\n  submit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired,\n  showResult: PropTypes.bool.isRequired,\n};","import styled from 'styled-components';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\n\nconst LabelSmall = styled.h4`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-weight: ${({ weight }) => weight || '600'};\n  font-size: ${({ fontSize }) => fontSize || '15px'};\n  text-align: ${({ align }) => align || 'left'};\n  padding: 5px 0;\n  ${({ firstToUpperCase }) =>\n    firstToUpperCase &&\n    `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${deviceConfiguration.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '20px'};\n  }\n  @media ${deviceConfiguration.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '23px'};\n  } \n  @media ${deviceConfiguration.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '26px'};\n  }\n`;\n\nexport default LabelSmall;\n","import styled from 'styled-components';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\n\nconst Text = styled.span`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-size: ${({ fontSize }) => fontSize || '12px'};\n  text-align: ${({ align }) => align || 'left'};\n\n  ${({ firstToUpperCase }) =>\n    firstToUpperCase &&\n    `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${deviceConfiguration.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '15px'};\n  }\n  @media ${deviceConfiguration.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '17px'};\n  } \n  @media ${deviceConfiguration.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '19px'};\n  }\n`;\n\nexport default Text;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport LabelSmall from './LabelSmall';\nimport Text from './Text';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\n\nconst ForecastWrapper = styled.div`\n  flex-shrink: 0;\n  flex-basis: 90px;\n  padding: 10px;\n  margin: 0 5px;\n  border-radius: 5px;\n  background-color: rgba(255, 255, 255, 0.2);\n  &:first-child {\n    margin-left: 0;\n  }\n  &:last-child {\n    margin-right: 0;\n  }\n  @media ${deviceConfiguration.tablet} {\n    flex-basis: 110px;\n  }\n  @media ${deviceConfiguration.laptop} {\n    flex-basis: 125px;\n  }\n  @media ${deviceConfiguration.laptopL} {\n    flex-basis: 140px;\n  }\n`;\n\nconst WeatherIcon = styled.img`\n  display: block;\n  height: 50px;\n  width: 50px;\n  margin: 0 auto;\n`;\n\nconst ForecastHour = props => {\n  const { temp, month, day, hour, icon } = props;\n  const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\n\n  return (\n    <ForecastWrapper>\n      <Text align=\"center\">\n        {month}.{day}\n      </Text>\n      <Text align=\"center\">{hour}:00</Text>\n      <WeatherIcon src={iconUrl} />\n      <LabelSmall align=\"center\" weight=\"400\">\n        {temp}&#176;\n      </LabelSmall>\n    </ForecastWrapper>\n  );\n};\n\nForecastHour.propTypes = {\n  temp: PropTypes.number.isRequired,\n  month: PropTypes.string.isRequired,\n  day: PropTypes.string.isRequired,\n  hour: PropTypes.number.isRequired,\n  icon: PropTypes.string.isRequired,\n};\n\nexport default ForecastHour;\n","import { keyframes } from 'styled-components';\n\nconst ResultEffectFadeIn = keyframes`\n  to {\n    opacity: 1;\n        visibility: visible;\n        top: 0;\n  }\n`;\n\nexport default ResultEffectFadeIn;\n","import styled from 'styled-components';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\n\nconst LabelLarge = styled.h2`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-weight: ${({ weight }) => weight || '600'};\n  font-size: ${({ fontSize }) => fontSize || '30px'};\n  text-align: ${({ align }) => align || 'left'};\n  padding: 5px 0;\n  ${({ firstToUpperCase }) =>\n    firstToUpperCase &&\n    `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${deviceConfiguration.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '37px'};\n  }\n  @media ${deviceConfiguration.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '43px'};\n  } \n  @media ${deviceConfiguration.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '52px'};\n  } \n`;\n\nexport default LabelLarge;\n","import styled from 'styled-components';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\n\nconst LabelMid = styled.h3`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-weight: ${({ weight }) => weight || '600'};\n  font-size: ${({ fontSize }) => fontSize || '20px'};\n  text-align: ${({ align }) => align || 'left'};\n  padding: 5px 0;\n  ${({ firstToUpperCase }) =>\n    firstToUpperCase &&\n    `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${deviceConfiguration.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '23px'};\n  }\n  @media ${deviceConfiguration.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '26px'};\n  } \n  @media ${deviceConfiguration.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '29px'};\n  }\n`;\n\nexport default LabelMid;\n","import React from 'react';\nimport './Result.css';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faCloud,\n  faBolt,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faSnowflake,\n  faSun,\n  faSmog,\n} from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\nimport ForecastHour from './ForecastHour';\nimport ResultEffectFadeIn from './ResultEffectFadeIn';\nimport LabelLarge from './LabelLarge';\nimport LabelMid from './LabelMid';\nimport LabelSmall from './LabelSmall';\nimport Text from './Text';\n\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  top: 20px;\n  animation: ${ResultEffectFadeIn} 0.5s 1.4s forwards;\n`;\n\nconst LocationWrapper = styled.div`\n  flex-basis: 100%;\n`;\n\nconst CurrentWeatherWrapper = styled.div`\n  flex-basis: 100%;\n  display: grid;\n  justify-content: center;\n  align-items: center;\n  grid-template-columns: auto 1fr;\n  margin: 20px 0;\n  grid-gap: 30px;\n  @media ${deviceConfiguration.mobileL} {\n    flex-basis: 50%;\n    padding-right: 10px;\n  }\n  @media ${deviceConfiguration.tablet} {\n    grid-template-columns: 1fr 1fr;\n    padding-right: 20px;\n  }\n`;\n\nconst WeatherIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 70px;\n  color: #ffffff;\n  @media ${deviceConfiguration.tablet} {\n    font-size: 100px;\n    justify-content: flex-end;\n  }\n  @media ${deviceConfiguration.laptop} {\n    font-size: 120px;\n  }\n  @media ${deviceConfiguration.laptopL} {\n    font-size: 140px;\n  }\n`;\n\nconst TemperatureWrapper = styled.div``;\n\nconst Temperature = styled.h3`\n  display: block;\n  font-size: 50px;\n  font-weight: 400;\n  color: #ffffff;\n  @media ${deviceConfiguration.tablet} {\n    font-size: 70px;\n  }\n  @media ${deviceConfiguration.laptop} {\n    font-size: 90px;\n  }\n  @media ${deviceConfiguration.laptopL} {\n    font-size: 110px;\n  }\n`;\n\nconst WeatherDetailsWrapper = styled.div`\n  flex-basis: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px 0;\n  margin: 20px 0;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 10px;\n  align-self: flex-start;\n  @media ${deviceConfiguration.mobileL} {\n    flex-basis: 50%;\n  }\n`;\n\nconst WeatherDetail = styled.div`\n  flex-basis: calc(100% / 3);\n  padding: 10px;\n  @media ${deviceConfiguration.laptop} {\n    padding: 20px 10px;\n  }\n`;\n\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  margin: 20px 0;\n  overflow: hidden;\n`;\n\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  margin-top: 20px;\n  padding-bottom: 20px;\n  @media ${deviceConfiguration.laptop} {\n    order: 4;\n  }\n`;\n\nconst Result = ({ weather }) => {\n  const {\n    city,\n    country,\n    date,\n    description,\n    main,\n    temp,\n    sunset,\n    sunrise,\n    humidity,\n    wind,\n    highestTemp,\n    lowestTemp,\n    forecast,\n  } = weather;\n\n  const forecasts = forecast.map(item => (\n    <ForecastHour\n      key={item.dt}\n      temp={Math.floor(item.main.temp * 1) / 1}\n      icon={item.weather[0].icon}\n      month={item.dt_txt.slice(5, 7)}\n      day={item.dt_txt.slice(8, 10)}\n      hour={item.dt_txt.slice(11, 13) * 1}\n    />\n  ));\n\n  let weatherIcon = null;\n\n  if (main === 'Thunderstorm') {\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n  } else if (main === 'Drizzle') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n  } else if (main === 'Rain') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  } else if (main === 'Snow') {\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n  } else if (main === 'Clear') {\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\n  } else if (main === 'Clouds') {\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n  } else {\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n  }\n\n  return (\n    <Results>\n      <LocationWrapper>\n        <LabelLarge>\n          {city}, {country}\n        </LabelLarge>\n        <LabelSmall weight=\"400\">{date}</LabelSmall>\n      </LocationWrapper>\n      <CurrentWeatherWrapper>\n        <WeatherIcon>{weatherIcon}</WeatherIcon>\n        <TemperatureWrapper>\n          <Temperature>{Math.floor(temp)}&#176;</Temperature>\n          <LabelSmall weight=\"400\" firstToUpperCase>\n            {description}\n          </LabelSmall>\n        </TemperatureWrapper>\n      </CurrentWeatherWrapper>\n      <WeatherDetailsWrapper>\n        <WeatherDetail>\n          <LabelSmall align=\"center\" weight=\"400\">\n            {Math.floor(highestTemp)}&#176;\n          </LabelSmall>\n          <Text align=\"center\">High</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <LabelSmall align=\"center\" weight=\"400\">\n            {wind}mph\n          </LabelSmall>\n          <Text align=\"center\">Wind</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <LabelSmall align=\"center\" weight=\"400\">\n            {sunrise}\n          </LabelSmall>\n          <Text align=\"center\">Sunrise</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <LabelSmall align=\"center\" weight=\"400\">\n            {Math.floor(lowestTemp)}&#176;\n          </LabelSmall>\n          <Text align=\"center\">Low</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <LabelSmall align=\"center\" weight=\"400\">\n            {humidity}%\n          </LabelSmall>\n          <Text align=\"center\">Rain</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <LabelSmall align=\"center\" weight=\"400\">\n            {sunset}\n          </LabelSmall>\n          <Text align=\"center\">Sunset</Text>\n        </WeatherDetail>\n      </WeatherDetailsWrapper>\n      <ForecastWrapper>\n        <LabelMid weight=\"400\">Forecast</LabelMid>\n        <Forecast>{forecasts}</Forecast>\n      </ForecastWrapper>\n    </Results>\n  );\n};\n\nResult.propTypes = {\n  weather: PropTypes.shape({\n    city: PropTypes.string,\n    country: PropTypes.string,\n    date: PropTypes.string,\n    description: PropTypes.string,\n    main: PropTypes.string,\n    temp: PropTypes.number,\n    sunrise: PropTypes.string,\n    sunset: PropTypes.string,\n    humidity: PropTypes.number,\n    wind: PropTypes.number,\n    highestTemp: PropTypes.number,\n    lowestTemp: PropTypes.number,\n    forecast: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport ResultEffectFadeIn from './ResultEffectFadeIn';\n\nconst NotFoundWrapper = styled.div`\n  max-width: 600px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 100px auto 0;\n  padding: 20px;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  border-radius: 10px;\n  top: 20px;\n  background-color: rgba(255, 255, 255, 0.3);\n  border-radius: 10px;\n  animation: ${ResultEffectFadeIn} 0.5s 1.4s forwards;\n`;\n\nconst NotfoundIcon = styled.span`\n  display: block;\n  text-align: center;\n  color: #ffffff;\n  font-size: 40px;\n  margin-right: 10px;\n`;\n\nconst NotFoundText = styled.span`\n  color: #ffffff;\n  font-size: 17px;\n`;\n\nconst NoResult = () => {\n  return (\n    <NotFoundWrapper>\n      <NotfoundIcon>\n        <FontAwesomeIcon icon={faFrown} />\n      </NotfoundIcon>\n      <NotFoundText>Currently we do not have data for the specified city...</NotFoundText>\n    </NotFoundWrapper>\n  );\n};\n\nexport default NoResult;\n","import React from 'react';\nimport styled from 'styled-components';\nimport SearchCity from './SearchCity';\nimport deviceConfiguration from '../responsiveForDevices/DeviceConfiguration';\nimport Result from './Result';\nimport NoResult from './NoResult';\n\nconst AppTitle = styled.h1`\n  text-align: center;\n  display: block;\n  height: 64px;\n  margin: 0;\n  padding: 20px 0;\n  font-size: 20px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #ffffff;\n  transition: 0.3s 1.4s;\n  opacity: ${({ showLabel }) => (showLabel ? 1 : 0)};\n\n  ${({ secondary }) =>\n    secondary &&\n    `\n    opacity: 1;\n    height: auto;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    text-align: center;\n    transition: .5s;\n    @media ${deviceConfiguration.tablet} {\n      font-size: 40px;\n    }\n    @media ${deviceConfiguration.laptop} {\n      font-size: 50px;\n    }\n    @media ${deviceConfiguration.laptopL} {\n      font-size: 60px;\n    }\n    @media ${deviceConfiguration.desktop} {\n      font-size: 70px;\n    }\n    \n  `}\n\n  ${({ showResult }) =>\n    showResult &&\n    `\n    opacity: 0;\n    visibility: hidden;\n    top: 10%;\n  `}\n`;\n\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nclass App extends React.Component {\n  state = {\n    value: 'KathMandu',\n    weatherInfo: null,\n    error: false,\n  };\n  componentDidMount() {\n    this.handleSearchCity(this.state.value)\n  }\n\n  handleInputChange = (cityValue,e) => {\n    this.setState({\n      value:cityValue,\n    });\n  };\n\n  handleSearchCity = (eachCityValue,e) => {\n    if(e){\n      e.preventDefault();\n    }\n    if(eachCityValue){\n      let  value  = eachCityValue;\n      const APIkey = process.env.REACT_APP_API_KEY;\n\n      const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n      const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n      Promise.all([fetch(weather), fetch(forecast)])\n          .then(([res1, res2]) => {\n            if (res1.ok && res2.ok) {\n              return Promise.all([res1.json(), res2.json()]);\n            }\n            throw Error(res1.statusText, res2.statusText);\n          })\n          .then(([data1, data2]) => {\n            const months = [\n              'January',\n              'February',\n              'March',\n              'April',\n              'May',\n              'June',\n              'July',\n              'August',\n              'September',\n              'October',\n              'November',\n              'December',\n            ];\n            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n            const currentDate = new Date();\n            const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n                months[currentDate.getMonth()]\n            }`;\n            const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n            const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n\n            const weatherInfo = {\n              city: data1.name,\n              country: data1.sys.country,\n              date,\n              description: data1.weather[0].description,\n              main: data1.weather[0].main,\n              temp: data1.main.temp,\n              highestTemp: data1.main.temp_max,\n              lowestTemp: data1.main.temp_min,\n              sunrise,\n              sunset,\n              clouds: data1.clouds.all,\n              humidity: data1.main.humidity,\n              wind: data1.wind.speed,\n              forecast: data2.list,\n            };\n            this.setState({\n              weatherInfo,\n              error: false,\n            });\n          })\n          .catch(error => {\n            console.log(error);\n\n            this.setState({\n              error: true,\n              weatherInfo: null,\n            });\n          });\n    }\n\n  };\n\n  render() {\n    const { value, weatherInfo, error } = this.state;\n    return (\n      <>\n        <AppTitle showLabel={(weatherInfo || error) && true}>Weather Forecast</AppTitle>\n        <WeatherWrapper>\n          <AppTitle secondary showResult={(weatherInfo || error) && true}>\n            Weather Forecast\n          </AppTitle>\n          <SearchCity\n              value={value}\n            showResult={(weatherInfo || error) && true}\n            change={this.handleInputChange}\n            submit={this.handleSearchCity}\n          />\n          {weatherInfo && <Result weather={weatherInfo} />}\n          {error && <NoResult error={error} />}\n        </WeatherWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('weather-forecast-app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}